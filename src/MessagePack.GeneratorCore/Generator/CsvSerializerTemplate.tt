<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT MODIFY.
// </auto-generated>
namespace <#= Namespace #>
{
    using System;
    using System.Collections.Generic;
    using Foundation.Serialization.Csv;
    using Foundation.Serialization.Csv.Internal;

<# foreach(var objInfo in ObjectSerializationInfos) { #>
    public sealed class <#= objInfo.Name #>Serializer : Foundation.Serialization.Csv.Internal.ISerializer<<#= objInfo.Name #>>
    {
        List<string> headerColumns = new List<string>();
        List<<#= objInfo.Name #>> rows = new List<<#= objInfo.Name #>>(32);
        <#= objInfo.Name #> currentInst = null;

<# foreach(var item in objInfo.Members) { #>
<# if(item.CustomFormatterTypeName != null) { #>
        <#= item.CustomFormatterTypeName #> __<#= item.Name #>CustomFormatter__ = new <#= item.CustomFormatterTypeName #>();
<# } #>
<# } #>

        void OnValueEnd(ArraySegment<byte> value, int row, int col)
        {
            if (row == 1)
            {
                headerColumns.Add(StringUtil.MakeString(value));
            }
            else
            {
                if (col == 1)
                {
                    currentInst = new <#= objInfo.Name #>();
                }

                var columnName = headerColumns[col - 1];

                switch (columnName)
                {
<# foreach(var x in objInfo.Members) { #>
                    case "<#= x.StringKey #>": // <#= x.Name #>
                        {
                            var __val = <#= x.GetDeserializeMethodString() #>;
                            currentInst.<#= x.Name #> = __val;
                        }
                        break;
<# } #>
                }
            }
        }
        
        void OnEntryEnd(int row)
        {
            if (row > 1)
            {
                rows.Add(currentInst);
                currentInst = null;
            }
        }

        public List<<#= objInfo.Name #>> Deserialize(byte[] data)
        {
            var parser = new CsvSerializer.Parser();
            parser.OnValueEnd = OnValueEnd;
            parser.OnEntryEnd = OnEntryEnd;

            parser.Parse(data, 0, data.Length);

            return rows;
        }
    }

    public sealed class <#= objInfo.Name #>SerializerResolver : Foundation.Serialization.Csv.Internal.ISerializerResolver
    {
        public ISerializer Resolve()
        {
            return new <#= objInfo.Name #>Serializer();
        }
    }
<# } #>
}
